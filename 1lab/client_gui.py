import socket
import json
import tkinter as tk
from tkinter import ttk, messagebox


class ClientGUI:
    def __init__(self, root):
        self.client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.client.connect(('localhost', 5555))

        self.root = root
        self.root.title("–ö–ª–∏–µ–Ω—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø—É—Ç–∏
        self.path_label = tk.Label(root, text="–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å:")
        self.path_label.pack()
        self.path_entry = tk.Entry(root, width=50)
        self.path_entry.pack()

        # –ö–Ω–æ–ø–∫–∏
        self.set_dir_button = tk.Button(root, text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é", command=self.set_directory)
        self.set_dir_button.pack()
        self.get_dir_button = tk.Button(root, text="–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É", command=self.get_structure)
        self.get_dir_button.pack()

        # –î–µ—Ä–µ–≤–æ
        self.tree = ttk.Treeview(root, height=20)
        self.tree.pack(fill=tk.BOTH, expand=True)

        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)

    def set_directory(self):
        path = self.path_entry.get()
        self.client.send(f"SET_DIR:{path}".encode('utf-8'))
        response = self.client.recv(1024).decode('utf-8')
        messagebox.showinfo("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞", response)

    def get_structure(self):
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            self.client.send("GET_STRUCTURE".encode('utf-8'))

            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size_data = self.client.recv(1024).decode('utf-8')
            if not file_size_data:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞")
                return
            file_size = int(file_size_data)
            self.client.send("OK".encode('utf-8'))  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä—É

            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            with open('received_structure.json', 'wb') as f:
                bytes_received = 0
                while bytes_received < file_size:
                    data = self.client.recv(min(1024, file_size - bytes_received))
                    if not data:
                        break
                    f.write(data)
                    bytes_received += len(data)

            # –ß–∏—Ç–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            with open('received_structure.json', 'r', encoding='utf-8') as f:
                structure = json.load(f)

            self.tree.delete(*self.tree.get_children())
            self.populate_tree('', structure)

        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É: {str(e)}")

    def populate_tree(self, parent, data):
        for key, value in data.items():
            if key not in ['files', 'dirs']:
                node = self.tree.insert(parent, 'end', text=f"üìÅ {key}", open=False)
                self.populate_tree(node, value)
            elif key == 'files':
                for file in value:
                    self.tree.insert(parent, 'end', text=f"üìÑ {file}")

    def on_closing(self):
        self.client.close()
        self.root.destroy()


if __name__ == "__main__":
    root = tk.Tk()
    app = ClientGUI(root)
    root.mainloop()
